def LevenshteinDistance(s, t):
    ''' Computes and returns the Levenshtein Distance (an integer)
    between strings s and t'''
    
    m = len(s)
    n = len(t)

    d = []

    for i in range(n+1):
        d.append([0] * (m+1))

    for i in range(n+1):
        d[i][0] = i # the distance of any first string to an empty second string

    for j in range(m+1):
        d[0][j] = j # the distance of any second string to an empty first string

    for j in range(1, m+1):        
        for i in range(1, n+1):
            if s[j-1] == t[i-1]:
                d[i][j] = d[i-1][j-1] # no operation required
            else:
                d[i][j] = min(d[i-1][j] + 1, d[i][j-1] + 1,d[i-1][j-1] + 1)

    return d[n][m]


# What I want is a language model.
# I want to be able to have some text, like:
# "going ti" and look at ngrams to find that
# "going ti" is unlikely, but "going to" is very likely.
# Given a string "<dictionary> <non-dictionary>" I want
# to be able to


# Most basically: what is the probability of having "word1" given a context of #word2"

if __name__ == "__main__":
    print LevenshteinDistance("sb", "a")
